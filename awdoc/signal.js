(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.WasmDSP = global.WasmDSP || {}, global.WasmDSP.modules = global.WasmDSP.modules || {}, global.WasmDSP.modules.signal = {})));
})(this, (function (exports) { 'use strict';

    const b64 = `
AGFzbQEAAAABpwEZYAF/AX9gA39/fwBgAX8AYAN/f38Bf2AAAGAFf39/f38Bf2ACf38Bf2ACf38A
YAF8AXxgBH9/f38AYAR/f39/AX9gAnx/AXxgAAF/YAR/fn9/AX9gBX19fX19AX9gBn9/f39/fwF/
YAZ/f39/f38AYAF/AXxgAnx8AXxgAnx/AX9gA3x8fwF8YAN/fn8BfmACfn8Bf2AFf39/f38AYAZ/
fH9/f38BfwLSAQgDZW52C2pzQXJyYXlPcGVuAAADZW52C2pzQXJyYXlSZWFkAAUDZW52C2pzQXJy
YXlTaXplAAADZW52DGpzQXJyYXlXcml0ZQAJFndhc2lfc25hcHNob3RfcHJldmlldzEIZmRfY2xv
c2UAABZ3YXNpX3NuYXBzaG90X3ByZXZpZXcxCGZkX3dyaXRlAAoWd2FzaV9zbmFwc2hvdF9wcmV2
aWV3MQdmZF9zZWVrAA0Wd2FzaV9zbmFwc2hvdF9wcmV2aWV3MQlwcm9jX2V4aXQAAgM4NwQOCQAG
AgEFAgoPEAABEQEGBAcDBAEIEhMUCAcLCAADFQEMAAALBQEAARYXGAcABgAAAgAMAgAEBQFwAQkJ
BQYBAYACgAIGCAF/AUGgrAQLB78CFAZtZW1vcnkCAApCaXF1YWRfbmV3AAkTQmlxdWFkX3Byb2Nl
c3NCbG9jawAKGV9faW5kaXJlY3RfZnVuY3Rpb25fdGFibGUBAAZCdWZmZXIACwdGRlRfbmV3AAwK
RkZUX2RlbGV0ZQANEEZGVF9wcm9jZXNzQmxvY2sADg1VcEZJUkRvd25fbmV3AA8QVXBGSVJEb3du
X2RlbGV0ZQAQFlVwRklSRG93bl9wcm9jZXNzQmxvY2sAEQxSYW5kb20zMl9uZXcAFA9SYW5kb20z
Ml9ub3JtYWwAFRBSYW5kb20zMl91bmlmb3JtABcHc29zZmlsdAAZC19pbml0aWFsaXplABwQX19l
cnJub19sb2NhdGlvbgAqCXN0YWNrU2F2ZQA8DHN0YWNrUmVzdG9yZQA9CnN0YWNrQWxsb2MAPgkO
AQBBAQsIEhgIJicoNDUK2OABNxMAQYQoQYwnNgIAQbwnQSo2AgALygEBBH8jAEEgayIFJAAgBSAA
OAIcIAUgATgCGCAFIAI4AhQgBSADOAIQIAUgBDgCDEEkEDsiCCEHIAUqAhwhACAFKgIYIQEgBSoC
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
AhAgASgCDCABKAIUakEBa0ECdGogACgCOCAAKAIsQQJ0aioCADgCACABIAEoAhRBAWo2AhQgACAA
KAIsQQFqNgIsDAELCyAAIAEoAhQgASgCBG42AiggACABKAIAIAAoAihsNgIoIABBADYCJCAAIAEo
AgxBAWs2AiAgAEEANgIcA0AgACgCHCAAKAIoSQRAIABDAAAAADgCGCAAIAAoAiA2AhQgACAAKAIk
NgIQA0AgACgCECABKAIMSQRAIAAgASgCCCAAKAIQQQJ0aioCACABKAIQIAAoAhRBAnRqKgIAlCAA
KgIYkjgCGCAAIAAoAhRBAWs2AhQgACABKAIAIAAoAhBqNgIQDAELCyAAKAI0IAAoAhxBAnRqIAAq
Ahg4AgAgACABKAIEIAAoAiRqNgIkIAAoAiQgASgCAE8EQCAAIAAoAiQgASgCAGs2AiQgACAAKAIg
QQFqNgIgCyAAIAAoAhxBAWo2AhwMAQsLIAAoAigEQCAAIAEoAhQgASgCBG42AgwgACABKAIEIAAo
AgxsNgIMIAAgASgCFCABKAIMaiAAKAIMa0EBazYCCCAAQQA2AgQDQCAAKAIEIAAoAghJBEAgASgC
ECAAKAIEQQJ0aiABKAIQIAAoAgQgACgCDGpBAnRqKgIAOAIAIAAgACgCBEEBajYCBAwBCwsgASAB
KAIUIAAoAgxrNgIUCyAAKAIoIARBEGokAAtzAQF/IwBBIGsiBiAANgIcIAYgATYCGCAGIAI2AhQg
BiADNgIQIAYgBDYCDCAGIAU2AgggBigCHCIAIAYoAhg2AgAgACAGKAIUNgIEIAAgBigCEDYCCCAA
IAYoAgw2AgwgACAGKAIINgIQIABBADYCFCAAC50lAQF/IwBBMGsiBiQAIAYgADYCLCAGIAE2Aigg
BiACNgIkIAYgAzYCICAGIAQ2AhwgBiAFNgIYIAYgBigCLDYCFCAGIAYoAhwiAEEEajYCHCAGIAAo
AgA2AhAgBiAGKAIcIgBBBGo2AhwgBiAAKAIANgIMIAYgBigCLCAGKAIQIAYoAgxsQQN0ajYCCAJA
IAYoAgxBAUYEQANAIAYoAiwgBigCKCkCADcCACAGIAYoAiggBigCJCAGKAIgbEEDdGo2AiggBiAG
KAIsQQhqIgA2AiwgACAGKAIIRw0ACwwBCwNAIAYoAiwgBigCKCAGKAIkIAYoAhBsIAYoAiAgBigC
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
AiABKAKkBEEFbBAbNgKUBCABKAKkBCEDIwBBEGsiACABQYgEajYCDCAAIAM2AgggACACNgIEIAAg
BDYCACAAKAIMIgIgACgCCDYCACACIAAoAgQ2AgQgAiAAKAIANgIIIAFBwAA2AoQEA0AgASABQbAE
aiABQYACaiICQcAAEBs2ApQEIAEoApQEIQMjAEEwayIAIAFBiARqNgIsIAAgAjYCKCAAIAE2AiQg
ACADNgIgIAAoAiwhAiAAQQA2AhwDQCAAKAIcIAAoAiBJBEAgACAAKAIoIAAoAhxBAnRqKgIAOAIY
IABBADYCFANAIAAoAhQgAigCAEkEQCAAIAIoAgQgACgCFEEUbGo2AhAgACACKAIIIAAoAhRBA3Rq
NgIMIAAgACgCECoCEIwgACgCDCoCBJQgACgCECoCDIwgACgCDCoCAJQgACoCGJKSOAIIIAAgACgC
ECoCCCAAKAIMKgIElCAAKAIQKgIAIAAqAgiUIAAoAhAqAgQgACgCDCoCAJSSkjgCGCAAKAIMIAAo
AgwqAgA4AgQgACgCDCAAKgIIOAIAIAAgACgCFEEBajYCFAwBCwsgACgCJCAAKAIcQQJ0aiAAKgIY
OAIAIAAgACgCHEEBajYCHAwBCwsgASgClAQhACMAQRBrIgIkACACIAFBqARqNgIMIAIgATYCCCAC
IAA2AgQgAigCDCgCACEDIAIoAgghBCACKAIEIQUjAEEQayIAJAAgACADNgIMIABBCTYCCCAAIAQ2
AgQgACAFNgIAIAAoAgwgACgCCCAAKAIEIAAoAgAQAyAAQRBqJAAgAkEQaiQAIAEoApQEQcAARg0A
CyABKAKgBBogAUHABGokAAtYAQJ/IwBBEGsiAiQAIAIgADYCDCACIAE2AgggAigCDCIBIAIoAggh
AyMAQRBrIgAkACAAIAM2AgwgACgCDBAAIABBEGokADYCACABQQA2AgQgAkEQaiQAC2sBAX8jAEEQ
ayIDJAAgAyAANgIMIAMgATYCCCADIAI2AgQgAyADKAIMIgAoAgBBCSADKAIIIAAoAgQgAygCBBAB
NgIAIAMoAgBBAEoEQCAAIAMoAgAgACgCBGo2AgQLIAMoAgAgA0EQaiQACwQAEAgLKwAgAgRAA0Ag
ACABLQAAOgAAIABBAWohACABQQFqIQEgAkEBayICDQALCwueAwMBfgN/A3wCQAJAAkACQCAAvSIB
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
An8CQAJAAkACQAJ/AkACQAJAAkACQAJAAkAgECwAACIFQV9xIAUgBUEPcUEDRhsgBSAMGyIFQdgA
aw4hBBQUFBQUFBQUDhQPBg4ODhQGFBQUFAIFAxQUCRQBFBQEAAsCQCAFQcEAaw4HDhQLFA4ODgAL
IAVB0wBGDQkMEwsgBikDQCEaQYIIDAULQQAhBQJAAkACQAJAAkACQAJAIAxB/wFxDggAAQIDBBoF
BhoLIAYoAkAgETYCAAwZCyAGKAJAIBE2AgAMGAsgBigCQCARrDcDAAwXCyAGKAJAIBE7AQAMFgsg
BigCQCAROgAADBULIAYoAkAgETYCAAwUCyAGKAJAIBGsNwMADBMLQQggCCAIQQhNGyEIIAlBCHIh
CUH4ACEFCyASIQEgBikDQCIaUEUEQCAFQSBxIQcDQCABQQFrIgEgGqdBD3FBgCRqLQAAIAdyOgAA
IBpCD1YgGkIEiCEaDQALCyABIQsgCUEIcUUgBikDQFByDQMgBUEEdkGCCGohFUECIQ0MAwsgEiEB
IAYpA0AiGlBFBEADQCABQQFrIgEgGqdBB3FBMHI6AAAgGkIHViAaQgOIIRoNAAsLIAEhCyAJQQhx
RQ0CIAggEiABayIBQQFqIAEgCEgbIQgMAgsgBikDQCIaQgBTBEAgBkIAIBp9Iho3A0BBASENQYII
DAELIAlBgBBxBEBBASENQYMIDAELQYQIQYIIIAlBAXEiDRsLIRUgGiASEDIhCwsgFCAIQQBIcQ0P
IAlB//97cSAJIBQbIQkgBikDQCIaQgBSIAhyRQRAIBIhC0EAIQgMDAsgCCAaUCASIAtraiIBIAEg
CEgbIQgMCwsCf0H/////ByAIIAhB/////wdPGyIKIhBBAEchCQJAAkACQCAGKAJAIgFB+AggARsi
CyIFIgxBA3FFIBBFcg0AA0AgDC0AAEUNAiAQQQFrIhBBAEchCSAMQQFqIgxBA3FFDQEgEA0ACwsg
CUUNASAMLQAARSAQQQRJckUEQANAIAwoAgAiAUF/cyABQYGChAhrcUGAgYKEeHENAiAMQQRqIQwg
EEEEayIQQQNLDQALCyAQRQ0BCwNAIAwgDC0AAEUNAhogDEEBaiEMIBBBAWsiEA0ACwtBAAsiASAF
ayAKIAEbIgEgC2ohCiAIQQBOBEAgByEJIAEhCAwLCyAHIQkgASEIIAotAAANDgwKCyAIBEAgBigC
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
wABzEDMgAyACIAIgA0gbIQkLIAxBsARqJAAgCQuGBQIGfgF/IAEgASgCAEEHakF4cSIBQRBqNgIA
IAAgASkDACEDIAEpAwghBSMAQSBrIgAkAAJAIAVC////////////AIMiBEKAgICAgIDAgDx9IARC
gICAgICAwP/DAH1UBEAgBUIEhiADQjyIhCEEIANC//////////8PgyIDQoGAgICAgICACFoEQCAE
QoGAgICAgICAwAB8IQIMAgsgBEKAgICAgICAgEB9IQIgA0KAgICAgICAgAhSDQEgAiAEQgGDfCEC
DAELIANQIARCgICAgICAwP//AFQgBEKAgICAgIDA//8AURtFBEAgBUIEhiADQjyIhEL/////////
A4NCgICAgICAgPz/AIQhAgwBC0KAgICAgICA+P8AIQIgBEL///////+//8MAVg0AQgAhAiAEQjCI
pyIBQZH3AEkNACADIQIgBUL///////8/g0KAgICAgIDAAIQiBCEGAkAgAUGB9wBrIghBwABxBEAg
AyAIQUBqrYYhBkIAIQIMAQsgCEUNACAGIAitIgeGIAJBwAAgCGutiIQhBiACIAeGIQILIAAgAjcD
ECAAIAY3AxgCQEGB+AAgAWsiAUHAAHEEQCAEIAFBQGqtiCEDQgAhBAwBCyABRQ0AIARBwAAgAWut
hiADIAGtIgKIhCEDIAQgAoghBAsgACADNwMAIAAgBDcDCCAAKQMIQgSGIAApAwAiA0I8iIQhAiAA
KQMQIAApAxiEQgBSrSADQv//////////D4OEIgNCgYCAgICAgIAIWgRAIAJCAXwhAgwBCyADQoCA
gICAgICACFINACACQgGDIAJ8IQILIABBIGokACACIAVCgICAgICAgICAf4OEvzkDAAsVACAARQRA
QQAPC0HoJiAANgIAQX8LlwIAIABFBEBBAA8LAn8CQCAABH8gAUH/AE0NAQJAQYQoKAIAKAIARQRA
IAFBgH9xQYC/A0YNAwwBCyABQf8PTQRAIAAgAUE/cUGAAXI6AAEgACABQQZ2QcABcjoAAEECDAQL
IAFBgEBxQYDAA0cgAUGAsANPcUUEQCAAIAFBP3FBgAFyOgACIAAgAUEMdkHgAXI6AAAgACABQQZ2
QT9xQYABcjoAAUEDDAQLIAFBgIAEa0H//z9NBEAgACABQT9xQYABcjoAAyAAIAFBEnZB8AFyOgAA
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
IAIgADYCCA8LQR8hAyAAQf///wdNBEAgAEEmIABBCHZnIgFrdkEBcSABQQF0a0E+aiEDCyACIAM2
AhwgAkIANwIQIANBAnRB2CpqIQECQAJAAkBBrCgoAgAiBEEBIAN0IgdxRQRAQawoIAQgB3I2AgAg
ASACNgIAIAIgATYCGAwBCyAAQRkgA0EBdmtBACADQR9HG3QhAyABKAIAIQEDQCABIgQoAgRBeHEg
AEYNAiADQR12IQEgA0EBdCEDIAQgAUEEcWoiB0EQaigCACIBDQALIAcgAjYCECACIAQ2AhgLIAIg
AjYCDCACIAI2AggMAQsgBCgCCCIAIAI2AgwgBCACNgIIIAJBADYCGCACIAQ2AgwgAiAANgIIC0HI
KEHIKCgCAEEBayIAQX8gABs2AgALCzcBAX9BASAAIABBAU0bIQACQANAIAAQOSIBDQFBmCwoAgAi
AQRAIAERBAAMAQsLQQEQBwALIAELBAAjAAsGACAAJAALEAAjACAAa0FwcSIAJAAgAAsLpxsVAEGA
CAvXF3kALSsgICAwWDB4AC0wWCswWCAwWC0weCsweCAweABzb3MAbmFuAGluZgBOQU4ASU5GAE1l
bW9yeSBhbGxvY2F0aW9uIGVycm9yLgBNZW1vcnkgYWxsb2NhdGlvbiBmYWlsZWQuAGZvdXQgYnVm
ZmVyIE5VTEwuAChudWxsKQBbRVJST1JdIC4uLy4uLy4uL2tpc3NmZnQva2lzc19mZnQuYzozNzcg
AFtFUlJPUl0gLi4vLi4vLi4va2lzc2ZmdC9raXNzX2ZmdC5jOjIwNyAAW0VSUk9SXSAuLi8uLi8u
Li9raXNzZmZ0L2tpc3NfZmZ0LmM6MzgzIAAKAAAAAAADAAAABAAAAAQAAAAGAAAAg/miAERObgD8
KRUA0VcnAN009QBi28AAPJmVAEGQQwBjUf4Au96rALdhxQA6biQA0k1CAEkG4AAJ6i4AHJLRAOsd
/gApsRwA6D6nAPU1ggBEuy4AnOmEALQmcABBfl8A1pE5AFODOQCc9DkAi1+EACj5vQD4HzsA3v+X
AA+YBQARL+8AClqLAG0fbQDPfjYACcsnAEZPtwCeZj8ALepfALondQDl68cAPXvxAPc5BwCSUooA
+2vqAB+xXwAIXY0AMANWAHv8RgDwq2sAILzPADb0mgDjqR0AXmGRAAgb5gCFmWUAoBRfAI1AaACA
2P8AJ3NNAAYGMQDKVhUAyahzAHviYABrjMAAGcRHAM1nwwAJ6NwAWYMqAIt2xACmHJYARK/dABlX
0QClPgUABQf/ADN+PwDCMugAmE/eALt9MgAmPcMAHmvvAJ/4XgA1HzoAf/LKAPGHHQB8kCEAaiR8
ANVu+gAwLXcAFTtDALUUxgDDGZ0ArcTCACxNQQAMAF0Ahn1GAONxLQCbxpoAM2IAALTSfAC0p5cA
N1XVANc+9gCjEBgATXb8AGSdKgBw16sAY3z4AHqwVwAXFecAwElWADvW2QCnhDgAJCPLANaKdwBa
VCMAAB+5APEKGwAZzt8AnzH/AGYeagCZV2EArPtHAH5/2AAiZbcAMuiJAOa/YADvxM0AbDYJAF0/
1AAW3tcAWDveAN6bkgDSIigAKIboAOJYTQDGyjIACOMWAOB9ywAXwFAA8x2nABjgWwAuEzQAgxJi
AINIAQD1jlsArbB/AB7p8gBISkMAEGfTAKrd2ACuX0IAamHOAAoopADTmbQABqbyAFx3fwCjwoMA
YTyIAIpzeACvjFoAb9e9AC2mYwD0v8sAjYHvACbBZwBVykUAytk2ACio0gDCYY0AEsl3AAQmFAAS
RpsAxFnEAMjFRABNspEAABfzANRDrQApSeUA/dUQAAC+/AAelMwAcM7uABM+9QDs8YAAs+fDAMf4
KACTBZQAwXE+AC4JswALRfMAiBKcAKsgewAutZ8AR5LCAHsyLwAMVW0AcqeQAGvnHwAxy5YAeRZK
AEF54gD034kA6JSXAOLmhACZMZcAiO1rAF9fNgC7/Q4ASJq0AGekbABxckIAjV0yAJ8VuAC85QkA
jTElAPd0OQAwBRwADQwBAEsIaAAs7lgAR6qQAHTnAgC91iQA932mAG5IcgCfFu8AjpSmALSR9gDR
U1EAzwryACCYMwD1S34AsmNoAN0+XwBAXQMAhYl/AFVSKQA3ZMAAbdgQADJIMgBbTHUATnHUAEVU
bgALCcEAKvVpABRm1QAnB50AXQRQALQ72wDqdsUAh/kXAElrfQAdJ7oAlmkpAMbMrACtFFQAkOJq
AIjZiQAsclAABKS+AHcHlADzMHAAAPwnAOpxqABmwkkAZOA9AJfdgwCjP5cAQ5T9AA2GjAAxQd4A
kjmdAN1wjAAXt+cACN87ABU3KwBcgKAAWoCTABARkgAP6NgAbICvANv/SwA4kA8AWRh2AGKlFQBh
y7sAx4m5ABBAvQDS8gQASXUnAOu29gDbIrsAChSqAIkmLwBkg3YACTszAA6UGgBROqoAHaPCAK/t
rgBcJhIAbcJNAC16nADAVpcAAz+DAAnw9gArQIwAbTGZADm0BwAMIBUA2MNbAPWSxADGrUsATsql
AKc3zQDmqTYAq5KUAN1CaAAZY94AdozvAGiLUgD82zcArqGrAN8VMQAArqEADPvaAGRNZgDtBbcA
KWUwAFdWvwBH/zoAavm5AHW+8wAok98Aq4AwAGaM9gAEyxUA+iIGANnkHQA9s6QAVxuPADbNCQBO
QukAE76kADMjtQDwqhoAT2WoANLBpQALPw8AW3jNACP5dgB7iwQAiRdyAMamUwBvbuIA7+sAAJtK
WADE2rcAqma6AHbPzwDRAh0AsfEtAIyZwQDDrXcAhkjaAPddoADGgPQArPAvAN3smgA/XLwA0N5t
AJDHHwAq27YAoyU6AACvmgCtU5MAtlcEACkttABLgH4A2genAHaqDgB7WaEAFhIqANy3LQD65f0A
idv+AIm+/QDkdmwABqn8AD6AcACFbhUA/Yf/ACg+BwBhZzMAKhiGAE296gCz568Aj21uAJVnOQAx
v1sAhNdIADDfFgDHLUMAJWE1AMlwzgAwy7gAv2z9AKQAogAFbOQAWt2gACFvRwBiEtIAuVyEAHBh
SQBrVuAAmVIBAFBVNwAe1bcAM/HEABNuXwBdMOQAhS6pAB2ywwChMjYACLekAOqx1AAW9yEAj2nk
ACf/dwAMA4AAjUAtAE/NoAAgpZkAs6LTAC9dCgC0+UIAEdrLAH2+0ACb28EAqxe9AMqigQAIalwA
LlUXACcAVQB/FPAA4QeGABQLZACWQY0Ah77eANr9KgBrJbYAe4k0AAXz/gC5v54AaGpPAEoqqABP
xFoALfi8ANdamAD0x5UADU2NACA6pgCkV18AFD+xAIA4lQDMIAEAcd2GAMnetgC/YPUATWURAAEH
awCMsKwAssDQAFFVSAAe+w4AlXLDAKMGOwDAQDUABtx7AOBFzABOKfoA1srIAOjzQQB8ZN4Am2TY
ANm+MQCkl8MAd1jUAGnjxQDw2hMAujo8AEYYRgBVdV8A0r31AG6SxgCsLl0ADkTtABw+QgBhxIcA
Kf3pAOfW8wAifMoAb5E1AAjgxQD/140AbmriALD9xgCTCMEAfF10AGutsgDNbp0APnJ7AMYRagD3
z6kAKXPfALXJugC3AFEA4rINAHS6JADlfWAAdNiKAA0VLACBGAwAfmaUAAEpFgCfenYA/f2+AFZF
7wDZfjYA7NkTAIu6uQDEl/wAMagnAPFuwwCUxTYA2KhWALSotQDPzA4AEoktAG9XNAAsVokAmc7j
ANYguQBrXqoAPiqcABFfzAD9C0oA4fT7AI47bQDihiwA6dSEAPy0qQDv7tEALjXJAC85YQA4IUQA
G9nIAIH8CgD7SmoALxzYAFO0hABOmYwAVCLMACpV3ADAxtYACxmWABpwuABplWQAJlpgAD9S7gB/
EQ8A9LURAPzL9QA0vC0ANLzuAOhdzADdXmAAZ46bAJIz7wDJF7gAYVibAOFXvABRg8YA2D4QAN1x
SAAtHN0ArxihACEsRgBZ89cA2XqYAJ5UwABPhvoAVgb8AOV5rgCJIjYAOK0iAGeT3ABV6KoAgiY4
AMrnmwBRDaQAmTOxAKnXDgBpBUgAZbLwAH+IpwCITJcA+dE2ACGSswB7gkoAmM8hAECf3ADcR1UA
4XQ6AGfrQgD+nd8AXtRfAHtnpAC6rHoAVfaiACuIIwBBulUAWW4IACEqhgA5R4MAiePmAOWe1ABJ
+0AA/1bpABwPygDFWYoAlPorANPBxQAPxc8A21quAEfFhgCFQ2IAIYY7ACx5lAAQYYcAKkx7AIAs
GgBDvxIAiCaQAHg8iQCoxOQA5dt7AMQ6wgAm9OoA92eKAA2SvwBloysAPZOxAL18CwCkUdwAJ91j
AGnh3QCalBkAqCmVAGjOKAAJ7bQARJ8gAE6YygBwgmMAfnwjAA+5MgCn9Y4AFFbnACHxCAC1nSoA
b35NAKUZUQC1+asAgt/WAJbdYQAWNgIAxDqfAIOioQBy7W0AOY16AIK4qQBrMlwARidbAAA07QDS
AHcA/PRVAAFZTQDgcYAAQeMfCz9A+yH5PwAAAAAtRHQ+AAAAgJhG+DwAAABgUcx4OwAAAICDG/A5
AAAAQCAlejgAAACAIoLjNgAAAAAd82k1EBIAQbAgC0EZAAoAGRkZAAAAAAUAAAAAAAAJAAAAAAsA
AAAAAAAAABkAEQoZGRkDCgcAAQAJCxgAAAkGCwAACwAGGQAAABkZGQBBgSELIQ4AAAAAAAAAABkA
Cg0ZGRkADQAAAgAJDgAAAAkADgAADgBBuyELAQwAQcchCxUTAAAAABMAAAAACQwAAAAAAAwAAAwA
QfUhCwEQAEGBIgsVDwAAAAQPAAAAAAkQAAAAAAAQAAAQAEGvIgsBEgBBuyILHhEAAAAAEQAAAAAJ
EgAAAAAAEgAAEgAAGgAAABoaGgBB8iILDhoAAAAaGhoAAAAAAAAJAEGjIwsBFABBryMLFRcAAAAA
FwAAAAAJFAAAAAAAFAAAFABB3SMLARYAQekjCycVAAAAABUAAAAACRYAAAAAABYAABYAADAxMjM0
NTY3ODlBQkNERUYAQZAkCwEFAEGcJAsBBABBtCQLCgUAAAAGAAAAaBMAQcwkCwECAEHcJAsI////
//////8AQaAlCwMgFgE=
`;

    class Biquad {
        static _wasm = null;
        static BlockSize = 16;
        constructor(b0, b1, b2, a1, a2) {
            this.ptr = Biquad._wasm.exports.Biquad_new(b0, b1, b2, a1, a2);
            this.ptrX = Biquad._wasm.exports.Buffer(Biquad.BlockSize);
            this.ptrY = Biquad._wasm.exports.Buffer(Biquad.BlockSize);
            let buffer = Biquad._wasm.exports.memory.buffer;
            this.bufX  = new Float32Array(buffer, this.ptrX, Biquad.BlockSize);
            this.bufY  = new Float32Array(buffer, this.ptrY, Biquad.BlockSize);
        }

        process(x) {
            let y = [];
            for (let i=0; i<x.length; i+=Biquad.BlockSize) {
                let sub = x.slice(i,i+Biquad.BlockSize);
                this.bufX.set(sub);
                Biquad._wasm.exports.Biquad_processBlock(this.ptr, this.ptrX, this.ptrY, sub.length);
                y = y.concat(Array.from(this.bufY));
            }
            return y.slice(0,x.length);
        }
    }

    /**
     *
     * @licstart  The following is the entire license notice for the 
     *  JavaScript code in this page.
     *
     * Copyright (C) 2025  Andrew Rogers
     *
     *
     * The JavaScript code in this page is free software: you can
     * redistribute it and/or modify it under the terms of the GNU
     * General Public License (GNU GPL) as published by the Free Software
     * Foundation, either version 3 of the License, or (at your option)
     * any later version.  The code is distributed WITHOUT ANY WARRANTY;
     * without even the implied warranty of MERCHANTABILITY or FITNESS
     * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.
     *
     * As additional permission under GNU GPL version 3 section 7, you
     * may distribute non-source (e.g., minimized or compacted) forms of
     * that code without the copy of the GNU GPL normally required by
     * section 4, provided you include this license notice and a URL
     * through which recipients can access the Corresponding Source.
     *
     * @licend  The above is the entire license notice
     * for the JavaScript code in this page.
     *
     */

    function agm(a,b,c) {
      let arr_a = [];
      let arr_b = [];
      let arr_c = [];
      for (let n = 0; n < 20; n++) {
        arr_a.push(a);
        arr_b.push(b);
        arr_c.push(c);
        if (Math.abs(c/a) < Number.EPSILON) break;

        let ta = a;
        let tb = b;
        a = (ta + tb) * 0.5;
        b = Math.sqrt(ta * tb);
        c = (ta - tb) * 0.5;
      }
      return [arr_a, arr_b, arr_c];
    }

    class Ellip {

      constructor(m) {
        this.m = m;
        this.m1 = 1-m;

        let a = 1.0;
        let b = Math.sqrt(1.0 - m); // DLMF uses k, k' whereas the tables use m and 1-m. m=k^2
        let c = Math.sqrt(m);
        this.agm = this.#agm(a, b, c);
        this.agm1 = this.#agm(a, c, b); // AGM sequence for complementary paramater.
      }

      am(u) {
        return this.#am(u, this.agm);
      }

      am1(u) {
        // Amplitude function of u for complementary parameter.
        return this.#am(u, this.agm1);
      }

      cd_c([u, v]) {
        // Derived from Equations 58 & 59 in https://mathworld.wolfram.com/JacobiEllipticFunctions.html
        let scd1 = this.scdp(u);
        let scd2 = this.scdp1(v);
        let nr = scd1.cn * scd2.cn;
        let ni = -scd1.sn * scd1.dn * scd2.sn * scd2.dn;
        let dr = scd1.dn * scd2.cn * scd2.dn;
        let di = -this.m * scd1.sn * scd1.cn * scd2.sn;
        return this.#div_c([nr,ni],[dr,di]);
      }

      scdp(u) {
        let phi = this.am(u);
        let s = Math.sin(phi);
        let c = Math.cos(phi);
        let d = Math.sqrt(1 - this.m * s * s); // DLMF 22.20.5
        return {sn: s, cn: c, dn: d, phi: phi};
      }

      scdp1(u) {
        let phi = this.am1(u);
        let s = Math.sin(phi);
        let c = Math.cos(phi);
        let d = Math.sqrt(1 - this.m1 * s * s);
        return {sn: s, cn: c, dn: d, phi: phi};
      }

      #agm(a,b,c) {
        let arr_a = [];
        let arr_b = [];
        let arr_c = [];
        for (let n = 0; n < 20; n++) {
          arr_a.push(a);
          arr_b.push(b);
          arr_c.push(c);
          if (Math.abs(c/a) < Number.EPSILON) break;

          let ta = a;
          let tb = b;
          a = (ta + tb) * 0.5;
          b = Math.sqrt(ta * tb);
          c = (ta - tb) * 0.5;
        }
        return [arr_a, arr_b, arr_c];
      }

      #am(u,agm) {
        let [a, b, c] = agm;

        let N = a.length - 1;
        let phi = (2.0 ** N) * a[N] * u;
        for (let n = N; n > 0; n--) {
          let x = c[n] * Math.sin(phi) / a[n];
          phi = (Math.asin(x) + phi) * 0.5;
        }
        return phi;
      }

      #div_c(a, b) {
        let den = b[0] * b[0] + b[1] * b[1];
        return [(a[0] * b[0] + a[1] * b[1]) / den, (a[1] * b[0] - a[0] * b[1]) / den];
      }

    }
    function am(u,m) {
      let a = 1.0;
      let b = Math.sqrt(1.0 - m); // DLMF uses k, k' whereas the tables use m and 1-m. m=k^2
      let c = Math.sqrt(m);
      [a, b, c] = agm(a, b, c);

      let arr_u = [u];
      if (u.constructor === Array) arr_u = u;

      let arr_phi = [];
      for (let k = 0; k < arr_u.length; k++) {
        let N = a.length - 1;
        let phi = (2.0 ** N) * a[N] * arr_u[k];
        for (let n = N; n > 0; n--) {
          let x = c[n] * Math.sin(phi) / a[n];
          phi = (Math.asin(x) + phi) * 0.5;
        }
        arr_phi.push(phi);
      }

      let phi = arr_phi[0];
      if (u.constructor === Array) phi = arr_phi;
      return phi;
    }

    function scdp(u, m) {
      let arr_u = [u];
      if (u.constructor === Array) arr_u = u;
      let arr_am = am(arr_u, m);
      let arr_ret = [];
      for (let n = 0; n < arr_u.length; n++) {
        let phi = arr_am[n];
        let s = Math.sin(phi);
        let c = Math.cos(phi);
        let d = Math.sqrt(1 - m * s * s); // DLMF 22.20.5
        arr_ret.push({sn: s, cn: c, dn: d, phi: phi});
      }
      let ret = arr_ret[0];
      if (u.constructor === Array) ret = arr_ret;
      return ret;
    }

    // ------ Carlson Symmetric Form ------

    // https://en.wikipedia.org/wiki/Carlson_symmetric_form

    function Rf(x,y,z) {
      for (let n = 0; n < 100; n++) {

        // Stop if converged
        let s = 3 / (x + y + z); // Reciprocal of mean.
        let error = Math.abs(x*s-1) + Math.abs(y*s-1) + Math.abs(z*s-1);
        if (error < Number.EPSILON) break;

        let lambda = Math.sqrt(x * y) + Math.sqrt(y * z) + Math.sqrt(z * x);
        x = (x + lambda) * 0.25;
        y = (y + lambda) * 0.25;
        z = (z + lambda) * 0.25;
      }

      return 1/Math.sqrt(x);
    }

    function F(phi, m) {
      const c = Math.cos(phi);
      const s = Math.sin(phi);
      return s * Rf(c * c, 1 - m * s * s, 1);
    }

    function K(m) {
      return Rf(0, 1-m, 1);
    }

    // ------ Elliptic rational function ------

    function R(N, xi, x) {
      let arr_x = [x];
      if (x.constructor === Array) arr_x = x;

      // Poles and zeros
      let u = [];
      let m = 1 / (xi * xi);
      let Km = K(m);
      let odd = N%2;
      for (let n = 1; n <= N; n++) {
        let d = 2 * n - 1;
        if (d != N) u.push(Km * d / N);
      }
      let scdp_vals = scdp(u, m);
      let cd = scdp_vals.map((o) => o.cn / o.dn);
      let z = [...cd];
      if (odd) z.push(0);
      let p = cd.map((v) => xi / v);

      function eval_poly(roots, x) {
        let prod = 1;
        for (let n = 0; n < roots.length; n++) prod *= x - roots[n];
        return prod;
      }

      let r0 = eval_poly(p, 1) / eval_poly(z, 1);
      let L = r0 * eval_poly(z, xi) / eval_poly(p, xi);

      let arr_ret = [];
      for (let n = 0; n < arr_x.length; n++) {
        let x = arr_x[n];
        arr_ret.push(r0 * eval_poly(z, x) / eval_poly(p, x));
      }
      arr_ret[0];
      if (u.constructor === Array) ;
      return {R: arr_ret, z, p, L};
    }

    /**
     *
     * @licstart  The following is the entire license notice for the 
     *  JavaScript code in this page.
     *
     * Copyright (C) 2025  Andrew Rogers
     *
     *
     * The JavaScript code in this page is free software: you can
     * redistribute it and/or modify it under the terms of the GNU
     * General Public License (GNU GPL) as published by the Free Software
     * Foundation, either version 3 of the License, or (at your option)
     * any later version.  The code is distributed WITHOUT ANY WARRANTY;
     * without even the implied warranty of MERCHANTABILITY or FITNESS
     * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.
     *
     * As additional permission under GNU GPL version 3 section 7, you
     * may distribute non-source (e.g., minimized or compacted) forms of
     * that code without the copy of the GNU GPL normally required by
     * section 4, provided you include this license notice and a URL
     * through which recipients can access the Corresponding Source.
     *
     * @licend  The above is the entire license notice
     * for the JavaScript code in this page.
     *
     */


    function butter(N, fc, bt, options) {
      let opt = checkOptions(options);

      // Prototype
      let [z, p, k] = buttap(N);

      // Frequency scale
      return frequencyScale(z, p, k, fc, bt, opt);
    }

    function buttap(N) {
      // Prototype analogue Butterworth low pass filter has poles on a unit circle.
      let p=[];
      for (let n=0; n<N; n++) {
        const angle = ((n + 0.5) / N + 0.5) * Math.PI;
        p.push([Math.cos(angle), Math.sin(angle)]);
      }
      if (N%2==1) p[(N-1)/2] = [-1, 0];

      return [[], p, 1];
    }

    function ellip(N, rp, rs, fc, bt, options) {
      let opt = checkOptions(options);

      // Prototype
      let [z, p, k] = ellipap(N, rp, rs);

      // Frequency scale
      return frequencyScale(z, p, k, fc, bt, opt);
    }

    function ellipap(N, rp, rs) {
      // Prototype analogue Elliptic low pass filter.

      rp = 10 ** (-rp / 20);
      rs = 10 ** (-rs / 20);
      let eps = Math.sqrt(1 / (rp * rp) - 1);
      let Lt  = Math.sqrt(1 / (rs * rs) - 1) / eps;

      // Zeros are the poles of the ellitic rational function mapped to the imaginary axis.
      let [r,xi] = findR(N, Lt);
      let z = r.p.map((v) => [0, v]);

      // Poles are from the zeros of the elliptic rational function with its argument being the complex frequency s = jw.
      let ml = 1 / (r.L * r.L);
      let Kl = K(ml);

      let m = 1 / (xi * xi);
      let Kxi = K(m);
      let el = new Ellip(m);
      let wi = - Kxi * F(Math.atan(-1/eps), 1-ml) / (N * Kl);

      let w = [];
      for (let n = 0; n < N; n++) w.push([(n * 2 + 1) * Kxi / N, wi]);

      let p = w.map((w_val) => el.cd_c(w_val));
      p = p.map((v) => [v[1], v[0]]); // Swap real and imaginary.

      // Compute gain at jw = 0
      let hz = 1;
      let hp = rp;
      if (N%2) hp = 1;
      z.forEach((v) => hz = hz * Math.sqrt(v[0]*v[0] + v[1]*v[1]));
      p.forEach((v) => hp = hp * Math.sqrt(v[0]*v[0] + v[1]*v[1]));

      return [z, p, hp / hz];
    }

    function bzt(z, p, k) {

      // Gain change compensation.
      let kz = [1, 0];
      z.forEach((v) => kz = complexMult$1(kz,[2 - v[0], -v[1]]));
      let kp = [1, 0];
      p.forEach((v) => kp = complexMult$1(kp,[2 - v[0], -v[1]]));
      k = k * complexDiv$1(kz, kp)[0];

      // Bilinear Z-transform
      function f(a) {
        return complexDiv$1([2 + a[0], a[1]], [2 - a[0], -a[1]])
      }
      z = z.map(f);
      p = p.map(f);
      while (z.length < p.length) z.push([-1,0]); // Move zeros at infinity to -1

      return [z, p, k];
    }

    function checkOptions(options) {
      let opt = options || {};
      if (!opt.hasOwnProperty('digital')) opt.digital = true;
      if (!opt.hasOwnProperty('sos')) opt.sos = true;
      return opt;
    }

    function complexDiv$1(num, den) {
      const a = num[0];
      const b = num[1];
      const c = den[0];
      const d = den[1];
      //
      //   a + ib       a + ib     c - id       ac - iad + ibc - iibd       ac + bd + i(bc-ad)
      //  --------  =  -------- * --------  =  -----------------------  =  --------------------
      //   c + id       c + id     c - id       cc - icd + icd - iidd            cc + dd
      //
      const scale = 1 / (c*c + d*d);
      const r = a*c + b*d;
      const i = b*c - a*d;
      return [scale*r, scale*i];
    }

    function complexMult$1(a, b) {
      return [a[0]*b[0] - a[1]*b[1], a[0]*b[1] + a[1]*b[0]];
    }

    function complexSqrt(a) {
      // Conver to polar and divide angle by two
      let r = Math.sqrt(a[0]**2 + a[1]**2);
      let angle = Math.atan2(a[1], a[0]);
      r = Math.sqrt(r);
      angle = angle / 2;
      return [r * Math.cos(angle), r * Math.sin(angle)];
    }

    function findR(N, L) {
      let xi_min = 1 + Number.EPSILON;
      let xi = xi_min;

      // Double xi until past target.
      for (let n = 0; n < 10; n++) {
        let r = R(N, xi, [0]);
        if (r.L >= L) break;
        xi = xi * 2;
      }

      // Binary search.
      let ll = xi / 2;
      if (ll < xi_min) ll = xi_min;
      let ul = xi;
      let r = {};
      for (let n = 0; n < 60; n++) {
        r = R(N, xi, [0]);
        if(r.L < L) ll = xi;
        else ul = xi;
        xi = (ll + ul) / 2;
      }
      return [r, xi];
    }

    function frequencyScale(z, p, k, fc, bt, opt) {
      bt = bt || 'L'; // Default to lowpass.

      // find first occurance of L,H,P or S
      // Lowpass Highpass bandPass bandStop
      bt = bt.toUpperCase().match(/[LHPS]/g);
      if (bt.length == 0) bt = 'L';
      else bt = bt[0];

      if (opt.digital) {
        if (fc.constructor === Array) fc = fc.map((v) => preWarp(v));
        else fc = preWarp(fc);
      }

      function bandTransform(r, ww) {
        let ret = [];
        r.forEach((v) => {
          let rr = complexMult$1(v,v);
          let sq = complexSqrt([rr[0] - ww, rr[1]]);
          ret.push([v[0]+sq[0], v[1]+sq[1]]);
          ret.push([v[0]-sq[0], v[1]-sq[1]]);
        });
        return ret;
      }

      function hpscale(z, p, k, fc) {
        // Gain compensation.
        let kz = [1, 0];
        z.forEach((v) => kz = complexMult$1(kz, [-v[0], -v[1]]));
        let kp = [1, 0];
        p.forEach((v) => kp = complexMult$1(kp, [-v[0], -v[1]]));
        k = k * complexDiv$1(kz, kp)[0];

        // Scale roots.
        z = z.map((v) => complexDiv$1([fc, 0], v));
        p = p.map((v) => complexDiv$1([fc, 0], v));
        return [z, p, k];
      }

      function lpscale(z, p, k, fc) {
        k = k * (fc ** (p.length - z.length));
        z = z.map((v) => [fc * v[0], fc * v[1]]);
        p = p.map((v) => [fc * v[0], fc * v[1]]);
        return [z, p, k];
      }

      // Scale zeros and poles
      if (bt == 'H') { // TODO: 'P' and 'S'
        [z, p, k] = hpscale(z, p, k,fc);
        while (z.length < p.length) z.push([0,0]); // Move zeros from infinity to zero.
      } else if (bt == 'P') {
        let ww = fc[0] * fc[1];
        let b = fc[1] - fc[0];
        let num_inf = p.length - z.length;
        [z, p, k] = lpscale(z, p, k, b/2);
        z = bandTransform(z, ww);
        p = bandTransform(p, ww);
        for (let n = 0; n < num_inf; n++) z.push([0,0]); // Move zeros from infinity to zero.
      } else if (bt == 'S') {
        let ww = fc[0] * fc[1];
        let b = fc[1] - fc[0];
        let num_inf = p.length - z.length;
        [z, p, k] = hpscale(z, p, k, b/2);
        z = bandTransform(z, ww);
        p = bandTransform(p, ww);
        let wo = Math.sqrt(ww);
        for (let n = 0; n < num_inf; n++) z.push([0, wo]); // Move zeros from infinity to jwo.
        for (let n = 0; n < num_inf; n++) z.push([0,-wo]); // Move zeros from infinity to -jwo.
      } else {
        // Lowpass default.
        [z, p, k] = lpscale(z, p, k, fc);
      }

      if (opt.digital) [z, p, k] = bzt(z, p, k);

      if (opt.sos) return zpk2sos(z, p, k);
      return [z, p, k];
    }

    function preWarp(f) {
      return 2 * Math.tan(Math.PI * f * 0.5);
    }

    function sort(r) {
      // If odd number of roots put real root last.
      if ((r.length % 2) == 0) return r

      // Find root with smallest absolute imaginary.
      let min = Math.abs(r[0][1]);
      let im = 0;
      for (let n = 0; n < r.length; n++) {
        let val = Math.abs(r[n][1]);
        if (val < min) {
          min = val;
          im = n;
        }
      }

      let ret = [];
      for (let n = 0; n < r.length; n++) {
        if (n != im) ret.push(r[n]);
      }
      ret.push(r[im]);

      return ret;
    }

    function zpk2sos(z,p,k) {

      // Create unity SOS array.
      let sos = [];
      while ((sos.length * 2) < z.length) sos.push([1, 0, 0, 1, 0, 0]);
      while ((sos.length * 2) < p.length) sos.push([1, 0, 0, 1, 0, 0]);

      // Sort roots
      z = sort(z);
      p = sort(p);

      // Modify sections for zeros
      let N = z.length;
      let odd = N % 2;
      let Npairs = (N - odd) / 2;
      for (let n = 0; n < Npairs; n++) {
        sos[n][1] = -2 * z[n][0];
        sos[n][2] = (z[n][0] ** 2) + (z[n][1] ** 2);
      }
      if(odd) sos[Npairs][1] = -z[Npairs*2][0];

      // Modify sections for poles
      N = p.length;
      odd = N % 2;
      Npairs = (N - odd) / 2;
      for (let n = 0; n < Npairs; n++) {
        sos[n][4] = -2 * p[n][0];
        sos[n][5] = (p[n][0] ** 2) + (p[n][1] ** 2);
      }
      if(odd) sos[Npairs][4] = -p[Npairs*2][0];

      let l = sos.length - 1;
      sos[l][0] *= k;
      sos[l][1] *= k;
      sos[l][2] *= k;

      return sos;
    }

    class FFT {
      static _wasm = null;

      constructor(N, inv) {
        inv = inv || 0;
        let alloc = FFT._wasm.exports.Buffer;
        this.ptrX = alloc(N*2);
        this.ptrY = alloc(N*2);
        const buffer = FFT._wasm.exports.memory.buffer;
        this.bufX = new Float32Array(buffer, this.ptrX, N*2);
        this.bufY = new Float32Array(buffer, this.ptrY, N*2);
        this.ptr = FFT._wasm.exports.FFT_new(N, inv);
      }

      process(x) {
        this.bufX.set(x);
        FFT._wasm.exports.FFT_processBlock(this.ptr, this.ptrX, this.ptrY);
        return Array.from(this.bufY);
      }

      specgram(x) {
        let y = [];
        for (let i=0; i<x.length; i+=this.bufY.length) {
          let sub = x.slice(i,i+this.bufY.length);
          let frame = [];
          this.bufX.set(sub);
          FFT._wasm.exports.FFT_processBlock(this.ptr, this.ptrX, this.ptrY);
          for (let j = 0; j < this.bufY.length; j+=2) frame.push(Math.sqrt(this.bufY[j] * this.bufY[j] + this.bufY[j+1] * this.bufY[j+1]));
          y.push(frame);
        }
        return y;
      }
    }

    class FIR {
        constructor(coeffs) {
        };
    }

    class Random32 {
      static _wasm = null;
      static BlockSize = 128;
      constructor(seed) {
        seed = seed || 0;  
        this.ptr = Random32._wasm.exports.Random32_new(seed);
        this.ptrY = Random32._wasm.exports.Buffer(Random32.BlockSize * 2);
        let buffer = Random32._wasm.exports.memory.buffer;
        this.bufY  = new Float64Array(buffer, this.ptrY, Random32.BlockSize);
      }

      normal(N) {
        let y = [];
        for (let i=0; i<N; i+=Random32.BlockSize) {
          let len = N-i;
          if (len>Random32.BlockSize) len = Random32.BlockSize;
          Random32._wasm.exports.Random32_normal(this.ptr, this.ptrY, len);
          y = y.concat(Array.from(this.bufY));
        }
        return y.slice(0,N);
      }

      uniform(N) {
        let y = [];
        for (let i=0; i<N; i+=Random32.BlockSize) {
          let len = N-i;
          if (len>Random32.BlockSize) len = Random32.BlockSize;
          Random32._wasm.exports.Random32_uniform(this.ptr, this.ptrY, len);
          y = y.concat(Array.from(this.bufY));
        }
        return y.slice(0,N);
      }
    }

    let wasm = null;

    function onWasm$1(w) {
      wasm = w;
    }

    function complexDiv(num, den) {
      const a = num[0];
      const b = num[1];
      const c = den[0];
      const d = den[1];
      //
      //   a + ib       a + ib     c - id       ac - iad + ibc - iibd       ac + bd + i(bc-ad)
      //  --------  =  -------- * --------  =  -----------------------  =  --------------------
      //   c + id       c + id     c - id       cc - icd + icd - iidd            cc + dd
      //
      const scale = 1 / (c*c + d*d);
      const r = a*c + b*d;
      const i = b*c - a*d;
      return [scale*r, scale*i];
    }

    function complexMult(a, b) {
      return [a[0]*b[0] - a[1]*b[1], a[0]*b[1] + a[1]*b[0]];
    }

    function sosEvalHz(coeffs, w) {
      //
      //   b[0]z + b[1] + b[2]/z       z = exp(i*w)  = cos(w) + i*sin(w)
      //  -----------------------
      //   a[0]z + a[1] + a[2]/z     1/z = exp(-i*w) = cos(w) - i*sin(w)
      //
      let c = Math.cos(w);
      let s = Math.sin(w);
      let num_r = (coeffs[0] + coeffs[2]) * c + coeffs[1];
      let num_i = (coeffs[0] - coeffs[2]) * s;
      let den_r = (coeffs[3] + coeffs[5]) * c + coeffs[4];
      let den_i = (coeffs[3] - coeffs[5]) * s;

      return complexDiv([num_r, num_i], [den_r, den_i]);
    }

    function sosfilt$1(sos, x) {
      let sos5 = [];
      for (let s = 0; s < sos.length; s++) {
        let c = sos[s];
        let scale = 1.0 / c[3];
        sos5.push(c[0] * scale);
        sos5.push(c[1] * scale);
        sos5.push(c[2] * scale);
        sos5.push(c[4] * scale);
        sos5.push(c[5] * scale);
      }
      let obj = {sos: sos5, x};
      let scope = wasm.newScope(obj);
      wasm.callCFunc('sosfilt', scope);
      return obj.y;
    }

    function sosfreqz$1(sos, w) {
      w = w || 300;
      if (typeof w === 'number') {
        const N = w;
        w = [];
        const step = Math.PI / N;
        for(let n=0; n < N; n++) w.push(n*step);
      }
      let h = [];
      for (let n = 0; n < w.length; n++) {
        let hz = sosEvalHz(sos[0], w[n]);
        for (let s = 1; s < sos.length; s++) {
          hz = complexMult(hz, sosEvalHz(sos[s], w[n]));
        }
        h.push(hz);
      }
      return [h,w];
    }

    function onWasm(wasm) {
      Biquad._wasm = wasm;
      FFT._wasm = wasm;
      FIR._wasm = wasm;
      Random32._wasm = wasm;
      onWasm$1(wasm);
    }

    const sosfilt  = sosfilt$1;
    const sosfreqz = sosfreqz$1;

    exports.Biquad = Biquad;
    exports.FFT = FFT;
    exports.FIR = FIR;
    exports.Random32 = Random32;
    exports.b64 = b64;
    exports.buttap = buttap;
    exports.butter = butter;
    exports.ellip = ellip;
    exports.ellipap = ellipap;
    exports.onWasm = onWasm;
    exports.sosfilt = sosfilt;
    exports.sosfreqz = sosfreqz;

}));
